{"ast":null,"code":"import _classCallCheck from\"/Users/nicholasykng/nationalpark-frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/nicholasykng/nationalpark-frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/nicholasykng/nationalpark-frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/nicholasykng/nationalpark-frontend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{FormControl,FormGroup,FormLabel}from'react-bootstrap';import ParkCard from\"../containers/ParkCard\";import{connect}from'react-redux';import{fetchParks as _fetchParks}from'../actions/fetchParks.js';var ParkSearch=/*#__PURE__*/function(_Component){_inherits(ParkSearch,_Component);var _super=_createSuper(ParkSearch);function ParkSearch(){var _this;_classCallCheck(this,ParkSearch);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={filtered:[]};_this.renderParks=function(){if(_this.state.filtered.length===0){return _this.props.parks.map(function(park){return/*#__PURE__*/React.createElement(ParkCard,{key:park.id,park:park});});}else{return _this.state.filtered.map(function(park){return/*#__PURE__*/React.createElement(ParkCard,{key:park.id,park:park});});}};_this.handleOnChange=function(event){var newParkList=_this.props.parks.filter(function(park){var lowercaseparkname=park.name.toLowerCase();var filterpark=event.target.value.toLowerCase();return lowercaseparkname.includes(filterpark);});_this.setState({filtered:newParkList});};return _this;}_createClass(ParkSearch,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.fetchParks();}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,\"Search For A National Park:\"),/*#__PURE__*/React.createElement(FormControl,{type:\"text\",name:\"searchterm\",onChange:this.handleOnChange})),this.renderParks());}}]);return ParkSearch;}(Component);var mapStateToProps=function mapStateToProps(state){return{parks:state.parks};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{fetchParks:function fetchParks(){return dispatch(_fetchParks());}};};export default connect(mapStateToProps,mapDispatchToProps)(ParkSearch);","map":{"version":3,"sources":["/Users/nicholasykng/nationalpark-frontend/client/src/components/parksearch.js"],"names":["React","Component","FormControl","FormGroup","FormLabel","ParkCard","connect","fetchParks","ParkSearch","state","filtered","renderParks","length","props","parks","map","park","id","handleOnChange","event","newParkList","filter","lowercaseparkname","name","toLowerCase","filterpark","target","value","includes","setState","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"4oBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,OAAQC,WAAR,CAAqBC,SAArB,CAAgCC,SAAhC,KAAgD,iBAAhD,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAAQC,UAAU,GAAVA,CAAAA,WAAR,KAAyB,0BAAzB,C,GAEMC,CAAAA,U,2UACFC,K,CAAQ,CACJC,QAAQ,CAAE,EADN,C,OAMRC,W,CAAc,UAAM,CAChB,GAAI,MAAKF,KAAL,CAAWC,QAAX,CAAoBE,MAApB,GAA+B,CAAnC,CAAsC,CAClC,MAAO,OAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,SAAAC,IAAI,qBAAI,oBAAC,QAAD,EAAU,GAAG,CAAEA,IAAI,CAACC,EAApB,CAAwB,IAAI,CAAED,IAA9B,EAAJ,EAAzB,CAAP,CACC,CAFL,IAGM,CACF,MAAO,OAAKP,KAAL,CAAWC,QAAX,CAAoBK,GAApB,CAAwB,SAAAC,IAAI,qBAAI,oBAAC,QAAD,EAAU,GAAG,CAAEA,IAAI,CAACC,EAApB,CAAwB,IAAI,CAAED,IAA9B,EAAJ,EAA5B,CAAP,CACH,CAEJ,C,OACDE,c,CAAiB,SAAAC,KAAK,CAAI,CAClB,GAAMC,CAAAA,WAAW,CAAG,MAAKP,KAAL,CAAWC,KAAX,CAAiBO,MAAjB,CAAwB,SAAAL,IAAI,CAAI,CAChD,GAAMM,CAAAA,iBAAiB,CAAGN,IAAI,CAACO,IAAL,CAAUC,WAAV,EAA1B,CACA,GAAIC,CAAAA,UAAU,CAAGN,KAAK,CAACO,MAAN,CAAaC,KAAb,CAAmBH,WAAnB,EAAjB,CACA,MAAOF,CAAAA,iBAAiB,CAACM,QAAlB,CAA2BH,UAA3B,CAAP,CACH,CAJmB,CAApB,CAMJ,MAAKI,QAAL,CAAc,CACVnB,QAAQ,CAAEU,WADA,CAAd,EAGH,C,mGAtBmB,CAChB,KAAKP,KAAL,CAAWN,UAAX,GACH,C,uCAqBQ,CACL,mBACI,4CACI,oBAAC,SAAD,mBACI,oBAAC,SAAD,oCADJ,cAEI,oBAAC,WAAD,EAAa,IAAI,CAAC,MAAlB,CAAyB,IAAI,CAAC,YAA9B,CAA2C,QAAQ,CAAE,KAAKW,cAA1D,EAFJ,CADJ,CAKK,KAAKP,WAAL,EALL,CADJ,CASH,C,wBArCoBV,S,EAuCzB,GAAM6B,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAArB,KAAK,CAAI,CAC7B,MAAO,CACHK,KAAK,CAAEL,KAAK,CAACK,KADV,CAAP,CAGH,CAJD,CAKA,GAAMiB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACnC,MAAO,CACHzB,UAAU,CAAE,4BAAMyB,CAAAA,QAAQ,CAACzB,WAAU,EAAX,CAAd,EADT,CAAP,CAGH,CAJD,CAKA,cAAeD,CAAAA,OAAO,CAACwB,eAAD,CAAkBC,kBAAlB,CAAP,CAA6CvB,UAA7C,CAAf","sourcesContent":["import React, {Component} from 'react'\nimport {FormControl, FormGroup, FormLabel} from 'react-bootstrap'\nimport ParkCard from \"../containers/ParkCard\"\nimport {connect} from 'react-redux'\nimport {fetchParks} from '../actions/fetchParks.js'\n\nclass ParkSearch extends Component {\n    state = {\n        filtered: []\n    }\n    componentDidMount() {\n        this.props.fetchParks()\n    }\n    renderParks = () => {\n        if (this.state.filtered.length === 0) {\n            return this.props.parks.map(park => <ParkCard key={park.id} park={park} />)\n            }\n        else  {\n            return this.state.filtered.map(park => <ParkCard key={park.id} park={park} />) \n        }\n\n    } \n    handleOnChange = event => {\n            const newParkList = this.props.parks.filter(park => {\n                const lowercaseparkname = park.name.toLowerCase()\n                let filterpark = event.target.value.toLowerCase()\n                return lowercaseparkname.includes(filterpark)\n            })\n       \n        this.setState({\n            filtered: newParkList\n        })\n    }\n    render() {\n        return (\n            <div>\n                <FormGroup>\n                    <FormLabel>Search For A National Park:</FormLabel>\n                    <FormControl type=\"text\" name=\"searchterm\" onChange={this.handleOnChange} />\n                </FormGroup>\n                {this.renderParks()}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        parks: state.parks\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchParks: () => dispatch(fetchParks())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkSearch)"]},"metadata":{},"sourceType":"module"}